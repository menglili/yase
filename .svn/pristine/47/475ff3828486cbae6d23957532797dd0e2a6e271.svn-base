package edu.upenn.cis455.YASE.storage;

import edu.upenn.cis455.YASE.database.YASEDatabase;

import java.io.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.HashSet;

public class FileSplitter {

    private static int numWorkers = 5;  //TODO
    private static String inputFolderString = "input";
    private static String outputFolder = "DB/";
    private static String idfFileString = "sortedIDF_cleaned.txt";
    private static HashMap<String, YASEDatabase> outputFolders = new HashMap<>();
    private static int counter;
    private static HashSet<String> idfWords = new HashSet<>();

    public static void main(String[] args) throws Exception {

        loadIDFFile(idfFileString);

        for (int i = 0; i < numWorkers; i++) {
            String dbNumber = outputFolder + String.format("%s", i);
            YASEDatabase db = new YASEDatabase(dbNumber);
            outputFolders.put(dbNumber, db);
        }

        File inputFolder = new File(inputFolderString);
        File[] inputFiles = inputFolder.listFiles();
        if (inputFiles != null) {
            for (File file : inputFiles) {
                Path path = Paths.get(file.getAbsolutePath());
                BufferedReader br = Files.newBufferedReader(path, Charset.defaultCharset());
                String line;
                while ((line = br.readLine()) != null) {


                    if (counter % 50000 == 0) {
                        System.out.println(counter);

                        for (YASEDatabase db : outputFolders.values()) {
                            db.sync();
                        }
                    }

                    String[] splitLine = line.split("\t");

                    if (splitLine.length < 2) {
                        System.err.println("format error: " + line);
                        continue;
                    }

                    String word = splitLine[0];

                    if (isNumberic(word) || !idfWords.contains(word)) {
                        continue;
                    }


                    String urls = line.replaceFirst(word + "\\t", "");


                    //store to DB
                    storeToDB(word, urls);
                    counter++;

                }


                br.close();
            }
        }
    }

    private static void loadIDFFile(String idfFileString) throws IOException {
        File idfFile = new File(idfFileString);

        //read every line
        BufferedReader br = new BufferedReader(new FileReader(idfFile));
        String line;
        while ((line = br.readLine()) != null) {
            String[] lineSplit = line.split("\\t");
            idfWords.add(lineSplit[0]);
        }
        br.close();

    }

    private static int getWorkerIndex(String key, int numBucket)
            throws NoSuchAlgorithmException, UnsupportedEncodingException {

        MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(key.getBytes());
        byte byteData[] = md.digest();
        return (byteData[0] + 128) % numBucket;

    }

    private static void storeToDB(String key, String value) throws Exception {
        int workerIndex = getWorkerIndex(key, numWorkers);

        //write to DB file
        String dbNumber = outputFolder + String.format("%s", workerIndex);

        outputFolders.get(dbNumber).addWordIndexPair(key, value);
    }

    private static boolean isValidString(final CharSequence cs) {
        if (cs == null) {
            return false;
        }
        final int sz = cs.length();
        for (int i = 0; i < sz; i++) {
            if (!Character.isLetterOrDigit(cs.charAt(i)) && cs.charAt(i) != '-'
                    && cs.charAt(i) != '.' && cs.charAt(i) != '\'') {
                return false;
            }
        }
        return true;
    }

    private static boolean isNumberic(final CharSequence cs) {
        if (cs == null) {
            return false;
        }
        final int sz = cs.length();
        for (int i = 0; i < sz; i++) {
            if (!Character.isDigit(cs.charAt(i))) {
                return false;
            }
        }
        return true;
    }
}
