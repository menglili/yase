package edu.upenn.cis455.YASE.storage;

import edu.upenn.cis455.YASE.database.YASEDatabase;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;

public class FileSplitter {

    private static int numWorkers = 1;  //TODO
    private static String inputFolderString = "input";
    private static HashMap<String, YASEDatabase> outputFolders = new HashMap<>();
    private static int counter;
    private static String outputFolder = "DB/";

    public static void main(String[] args) throws Exception {

        for (int i = 0; i < numWorkers; i++) {
            String dbNumber = outputFolder + String.format("%s", i);
            YASEDatabase db = new YASEDatabase(dbNumber);
            outputFolders.put(dbNumber, db);
        }

        File inputFolder = new File(inputFolderString);

        File[] inputFiles = inputFolder.listFiles();
        if (inputFiles != null) {
            for (File file : inputFiles) {
                BufferedReader br = new BufferedReader(new FileReader(file));
                String line;
                while ((line = br.readLine()) != null) {

//                    System.out.println("line: " + line);
                    counter++;
                    if (counter % 5000 == 0) {
                        System.out.println(counter);

                        for (YASEDatabase db : outputFolders.values()) {
                            db.sync();
                        }
                    }

                    String[] splitLine = line.split("\t");
                    String word = splitLine[0];
                    String urls = splitLine[1];

                    //TODO sort by TF
                    //urlTF format: url tf, url tf,...
//                    String[] urlTFs = urls.split(",");
//                    TreeMap<Double, String> urlTFMap = new TreeMap(Collections.reverseOrder());
//                    for (String s : urlTFs) {
//                        if (s.length() != 2)
//                            continue;
//                        String[] urlTF = s.split(" ");
//                        String url = urlTF[0];
//                        double tf = Double.parseDouble(urlTF[1]);
//                        urlTFMap.put(tf, url);
//                    }
//
//
//                    urls = "";
//                    while (!urlTFMap.isEmpty()) {
//                        Map.Entry entry = urlTFMap.firstEntry();
//                        urls += entry.getValue() + " " + entry.getKey();
//                    }

                    //store to DB
                    storeToDB(word, urls);

                }


                br.close();
            }
        }
    }

    private static int getWorkerIndex(String key, int numBucket)
            throws NoSuchAlgorithmException, UnsupportedEncodingException {

        MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(key.getBytes());
        byte byteData[] = md.digest();
        return (byteData[0] + 128) % numBucket;

    }

    private static void storeToDB(String key, String value) throws Exception {
        int workerIndex = getWorkerIndex(key, numWorkers);

        //write to DB file
        String dbNumber = outputFolder + String.format("%s", workerIndex);

        outputFolders.get(dbNumber).addWordIndexPair(key, value);
    }
}
