package edu.upenn.cis455.YASE.searcher;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;

public class SearcherServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;
    private ArrayList<LinkedList<String>> keywordsAndURLTF;
    private String[] indexerAddressList;
    private HashMap<String, Float> idfMap;
    private HashMap<String, Float> prMap;
    private final int numberOfPagesToDisplay = 100;
    private final int priorityQueueSize = 3000;

    public void init(ServletConfig config) {
        indexerAddressList = new String[5];
        indexerAddressList[0] = config.getInitParameter("indexer1");
        indexerAddressList[1] = config.getInitParameter("indexer2");
        indexerAddressList[2] = config.getInitParameter("indexer3");
        indexerAddressList[3] = config.getInitParameter("indexer4");
        indexerAddressList[4] = config.getInitParameter("indexer5");

        //load pagerank and idf file
        String idf_pr_dir = config.getInitParameter("idf_pr_dir");
        try {
            idfMap = getMapFromFile(idf_pr_dir + "/idf.txt");
            prMap = getMapFromFile(idf_pr_dir + "/pagerank.txt");
            System.out.println("Map load successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public HashMap<String, Float> getMapFromFile(String filePath) throws IOException {
        File file = new File(filePath);
        HashMap<String, Float> map = new HashMap<String, Float>();

        BufferedReader bw = new BufferedReader(new FileReader(file));
        String line;

        while ((line = bw.readLine()) != null) {
            String[] values = line.split("\t");
            if (values.length != 2) {
                continue;
            }
            map.put(values[0], Float.valueOf(values[1]));
        }
        bw.close();
        return map;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        String keywordsString = req.getParameter("s");
        PrintWriter pw = resp.getWriter();

        String[] keywordsStrings = keywordsString.split(" ");
        int numberOfKeyWords = keywordsStrings.length;

        final ArrayList<Float> query = new ArrayList<Float>();
        keywordsAndURLTF = new ArrayList<LinkedList<String>>();

        LinkedList<Thread> threadLinkedList = new LinkedList<Thread>();

        for (int i = 0; i < keywordsStrings.length; i++) {
            LinkedList<String> currentList = new LinkedList<String>();
            keywordsAndURLTF.add(currentList);
            Thread t;
            try {
                t = new Thread(new GetURLByWordThread(keywordsStrings[i],
                        getIndexerAddress(keywordsStrings[i], indexerAddressList.length), currentList),
                        keywordsStrings[i]
                );
                query.add(getIDF(keywordsStrings[i]));
                t.start();
                threadLinkedList.add(t);

            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
        }

        //		System.out.println("query: " + query);


        for (Thread t : threadLinkedList) {
            try {
                t.join();
                System.out.println(t.getName() + " look up finished!");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }


        PriorityQueue<URLVector> pq = new PriorityQueue<URLVector>(priorityQueueSize, new Comparator<URLVector>() {
            public int compare(URLVector u1, URLVector u2) {
                //				System.out.println(u1.getURL() + "getPR: " + getPR(u1.getURL()));
                Float f1 = u1.cossimilarity(query) * getPR(u1.getURL());
                //				System.out.println(u2.getURL() + "getPR: " + getPR(u2.getURL()));

                Float f2 = u2.cossimilarity(query) * getPR(u2.getURL());
                if (f1 > f2) {
                    return -1;
                } else if (f1 == f2) {
                    return 0;
                } else {
                    return 1;
                }
            }
        });
        HashMap<String, URLVector> urlMap = new HashMap<String, URLVector>();
        for (int i = 0; i < keywordsAndURLTF.size(); i++) {
            LinkedList<String> l = keywordsAndURLTF.get(i);
            //			System.out.println("l: " + l);
            for (String s : l) {
                //				System.out.println("s: " + s);

                String[] values = s.split(" ");
                if (values.length != 2) {
                    continue;
                }
                URLVector urlVector;
                if (urlMap.containsKey(values[0])) {
                    urlVector = urlMap.get(values[0]);
                } else {
                    urlVector = new URLVector(values[0], numberOfKeyWords);
                    urlMap.put(values[0], urlVector);
                }
                //				System.out.println("keyword: " + values[0] + "i: " + i + "values: " +Float.valueOf(values[1])*getIDF(keywordsStrings[i]));

                urlVector.setVector(i, Float.valueOf(values[1]) * getIDF(keywordsStrings[i]));
            }
        }

        for (URLVector u : urlMap.values()) {
            pq.add(u);
        }
        LinkedList<LinkedList<String>> result = new LinkedList<LinkedList<String>>();
        LinkedList<Thread> threadList = new LinkedList<Thread>();
        int i = 0;
        while (!pq.isEmpty()) {
            LinkedList<String> titleAndContent = new LinkedList<String>();
            String urlString = pq.poll().getURL();
            titleAndContent.add(urlString);
            result.add(titleAndContent);
            String indexerAddress = null;
            try {
                indexerAddress = getIndexerAddress(urlString, 5);
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
            Thread t = new Thread(new GetPreviewByURLThread(keywordsString, urlString, indexerAddress, titleAndContent), urlString);
            t.start();
            threadList.add(t);
            i++;
            if (i >= numberOfPagesToDisplay) {
                break;
            }
        }

        for (Thread t : threadList) {
            try {
                t.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(t.getName() + " is finished!");
        }
//		System.out.println("Result: " + result);
        for (LinkedList<String> l : result) {
            pw.println(l.get(0) + "\t" + l.get(1) + "\t" + l.get(2) + "\t" + l.get(3));
        }
        pw.flush();
        pw.close();
    }

    private Float getIDF(String word) {
        if (idfMap.containsKey(word)) {
            return idfMap.get(word);
        } else {
            return 12f;
        }
    }

    private Float getPR(String url) {
        String domain;
        try {
            domain = getTopDomain(new URL(url).getHost());

            if (prMap.containsKey(domain)) {
                return prMap.get(domain);
            } else {
                return 1f;
            }
        } catch (MalformedURLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return 1f;
        }
    }

    private String getTopDomain(String url) {

        String[] values = url.split("\\.");
        int len = values.length;
        if (len < 2) {
            return null;
        } else if (values[len - 2].equals("")) {
            return null;
        }
        return (values[len - 2] + "." + values[len - 1]).toLowerCase();

    }

    private String getIndexerAddress(String s, int numIndexer)
            throws NoSuchAlgorithmException {

        MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(s.getBytes());
        byte byteData[] = md.digest();
        int indexID = (byteData[0] + 128) % numIndexer;
        //System.out.println("keywordString: " + keywordString + " indexID: " + indexID);
        return indexerAddressList[indexID];

    }

}
